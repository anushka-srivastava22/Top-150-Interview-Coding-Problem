Problem Statement
https://leetcode.com/problems/spiral-matrix/
Given an m x n matrix, return all elements of the matrix in spiral order.

Solution
class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int row_start=0,row_end=matrix.length-1,col_start=0,col_end=matrix[0].length-1;
        List<Integer> res=new ArrayList<>();
        while(row_start<=row_end && col_start <= col_end)
        {
            for(int i=col_start;i<=col_end;i++)
            {
                res.add(matrix[row_start][i]);
            }
            row_start++;
            for(int i=row_start;i<=row_end;i++)
            {
                res.add(matrix[i][col_end]);
            }
            col_end--;
            if(row_start<=row_end)
            {
                for(int i=col_end;i>=col_start;i--)
                {
                    res.add(matrix[row_end][i]);
                }
            }
            row_end--;
            if(col_start<=col_end)
            {
                for(int i=row_end;i>=row_start;i--)
                {
                    res.add(matrix[i][col_start]);
                }
            }
            col_start++;
        }
        return res;
    }
}

Algorithm
1. Assign row_start=0,row_end=matrix.length-1,col_start=0,col_end=matrix[0].length-1.
2. Create a list of integers as res.
3. Run while loop till row_start<=row_end && col_start <= col_end.
4. Run for loop from col_start till col_end and add matrix[row_start][i] then increase row_start.
5. Run for loop from row_start till row_end and add matrix[i][col_end] then decrease col_end.
6. Check if row_start is less than or equal to row_end then  Run for loop from col_end till col_start and add matrix[row_end][i] then decrease row_end.
7. Check if col_start is less than or equal to col_end then  Run for loop from row_end till row_start and add matrix[i][col_start] then increase col_start.
