Problem Statement
https://leetcode.com/problems/merge-sorted-array/
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Solution

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i=m-1;
        int j=n-1;
        int k = m+n-1;
        while(k>=0)
        {
            if(j<0 || (i>=0 && (nums1[i]>nums2[j])))
            {
                nums1[k--] = nums1[i--];
            }
            else {
                nums1[k--] = nums2[j--];
            }
        }
        
    }
}

Algorithm
1. Assign the length of nums1 & nums 2 to i & j.
2. Assign the combine length to k.
3. Run the while loop till k>=0.
4. Check if j<0 or the value at i is greater or equal to 0 and value at i of nums1 > value at j of nums2, is its true then assign the value of nums1 at i to num1 
at k and decrease the value of i & k otherwise assign the value of nums1 at j to num1 at k and decrease value of j & k.
