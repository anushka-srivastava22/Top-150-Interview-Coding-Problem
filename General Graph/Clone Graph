Problem Statement

https://leetcode.com/problems/clone-graph/

Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.


Solution

class Solution {
    Map<Node,Node> map = new HashMap<>();
    public Node cloneGraph(Node node) {
        if(node == null)
        {
            return null;
        }
        Node newNode = new Node(node.val);
        map.put(node,newNode);
        for(Node n: node.neighbors)
        {
            if(map.containsKey(n))
            {
                newNode.neighbors.add(map.get(n));
            }
            else
            {
                newNode.neighbors.add(cloneGraph(n));
            }
        }
        return newNode;
    }
}


Algorithm

1. Create a Map of Node, Node as map.
2. Check if node is null then return null.
3. Create a newNode of Node type as value of node.
4. Put node,newNode on map.
5. Run for each loop for every neighbors of node through n.
6. Check if map containsKey as n then add the value at n of map to the neighbors of newNode.
7. Otherwise add the call function cloneGraph(n) to the neighbors of newNode.
8. Return newNode.
