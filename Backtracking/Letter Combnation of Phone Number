Problem Statement

https://leetcode.com/problems/letter-combinations-of-a-phone-number/

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Solution

class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<>();
        if(digits == null || digits.length() == 0)
        {
            return res;
        }
        addStrings(digits,new StringBuilder(),res,0);
        return res;
    }
    public void addStrings(String digits, StringBuilder sb, List<String> res, int index)
    {
        if(index == digits.length())
        {
            res.add(sb.toString());
            return;
        }
        char chars[] = getChars(digits.charAt(index));
        for(char ch: chars)
        {
            sb.append(Character.toString(ch));
            addStrings(digits,sb,res,index+1);
            sb.deleteCharAt(sb.length()-1);

        }
    }
    public char[] getChars(char c)
    {
        switch(c)
        {
            case '2' : return new char[] {'a','b','c'};
            case '3' : return new char[] {'d','e','f'};
            case '4' : return new char[] {'g','h','i'};
            case '5' : return new char[]{'j', 'k', 'l'};
            case '6' : return new char[]{'m', 'n', 'o'};
            case '7' : return new char[]{'p', 'q', 'r', 's'};
            case '8' : return new char[]{'t', 'u', 'v'};
            case '9' : return new char[]{'w', 'x', 'y', 'z'};
                default : return  new char[1];
        }
    }
}
