Problem Statement

https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that 
they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

Solution

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int l=0, h=numbers.length-1, sum=0;
        while((sum=numbers[l]+numbers[h])!= target && l!=h)
        {
            if(sum > target)
            {
                h = binarySearch(numbers,l+1,h-1,target-numbers[l]);
            }
            else if(sum<target)
            {
                l = binarySearch(numbers,l+1,h-1,target-numbers[h]);
            }
            
        }
        return new int[]{l+1,h+1};
    }
    private static int binarySearch(int numbers[], int low, int high, int target )
    {
        while(low<high)
        {
            int mid = (low+high)/2;
            if(target==numbers[mid])
            {
                return mid;
            }
            else if(target<numbers[mid])
            {
                high = mid;
            }
            else 
            {
                low = mid+1;
            }

        }
        return high;
    }
}

Algorithm
1. Assign l=0, h=numbers.length-1, sum=0.
2. Run while loop till sum of value at l position in numbers array and value at h position in numbers array is not equal to target and l is not equal to h.
3. Check if sum is greater than target value then assign h = binarySearch(numbers,l+1,h-1,target-numbers[l]).
4. Check if sum is less than target value then assign l = binarySearch(numbers,l+1,h-1,target-numbers[h]).
5. Return array of l+1 and h+1.
6. Create a function of binary search.
