Problem Statement

https://leetcode.com/problems/sum-root-to-leaf-numbers/
You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.


Solution

class Solution {
    public int sumNumbers(TreeNode root) {
        int ans = helper(root,0);
        return ans;
    }
    public int helper(TreeNode root , int sum)
    {
        if(root == null)
        {
            return 0;
        }
        sum = sum * 10 + root.val;
        if(root.left == null && root.right == null)
        {
            return sum;
        }
        int finalSum = helper(root.left, sum) + helper(root.right, sum);
        return finalSum;
    }
}

Algorithm

1. Call the helper with root, 0 in ans and return it.
2. Create a helper function of root and sum.
3. Check if root is null then return 0.
4. Assign sum * 10 + root.val to sum.
5. Check if value of root.left and root.right is null then return sum.
6. Assign helper(root.left, sum) + helper(root.right, sum) to finalSum.
