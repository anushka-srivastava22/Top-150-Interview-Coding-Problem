Problem Statement

https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/
Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”


Solution

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        TreeNode node = root;
        if(node == null || node == p || node == q)
        {
            return node;
        }
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        if(left == null)
        {
            return right;
        }
        else if(right == null)
        {
            return left;
        }
        else 
        {
            return node;
        }
    }
}


Algorithm 

1. Assign root to node.
2. Check if node is equal to null or p or q then return node.
3. Assign left = lowestCommonAncestor(root.left,p,q) and right = lowestCommonAncestor(root.right,p,q).
4. Check if left is null then return right then check if right is null, return left otherwise return node.
