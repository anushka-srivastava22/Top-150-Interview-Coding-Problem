Problem Statement

https://leetcode.com/problems/minimum-path-sum/

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


Solution

class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int dp[][] = new int[m][n];
        dp[0][0] = grid[0][0];
        findPath(grid,dp,m,n,m-1,n-1);
        return dp[m-1][n-1];
    }
    private void findPath(int grid[][], int dp[][], int m, int n, int i, int j)
    {
        if(i==0 && j==0)
        {
            return;
        }
        if(i<0 || j<0 || i>=m || j>=n)
        {
            return;
        }
        if(dp[i][j] > 0)
        {
            return;
        }
        findPath(grid,dp,m,n,i-1,j);
        findPath(grid,dp,m,n,i,j-1);
        dp[i][j] = Integer.MAX_VALUE;
        if(i>0)
        {
            dp[i][j] = Math.min(dp[i][j],dp[i-1][j] + grid[i][j]);

        }
        if(j>0)
        {
            dp[i][j] = Math.min(dp[i][j],dp[i][j-1]+grid[i][j]);
        }
    }
}
