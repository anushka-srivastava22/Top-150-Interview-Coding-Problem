Problem Statement

https://leetcode.com/problems/unique-paths-ii/

You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The testcases are generated so that the answer will be less than or equal to 2 * 109.


Solution

class Solution {
    static int helper2(int arr[][]){
        int m = arr.length;
        int n = arr[0].length;

        int dp[][] = new int[m+1][n+1];
        for(var a : dp) 
            Arrays.fill(a,0);
        
        dp[m-1][n-1] = 1;
    
        for(int i=m-1; i>=0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                if (i == m - 1 && j == n - 1) 
                    continue;
                if (arr[i][j] == 1) 
                    dp[i][j] = 0;
                else 
                    dp[i][j] = dp[i + 1][j] + dp[i][j + 1];
            }
        }
        return dp[0][0];
    }
    public int uniquePathsWithObstacles(int[][] arr) {

       if(arr[arr.length-1][arr[0].length-1]==1) return 0;
       return helper2(arr);
    }
}
