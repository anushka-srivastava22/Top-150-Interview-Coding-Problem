Problem Statement

https://leetcode.com/problems/linked-list-cycle/submissions/?envType=study-plan-v2&envId=top-interview-150

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.


Solution

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null || head.next == null)
        {
            return false;
        }
            ListNode fast = head;
            ListNode slow = head;
            while(fast!=null && fast.next!=null)
            {
                slow = slow.next;
                fast = fast.next.next;
                if(slow == fast)
                {
                    return true;
                }
            }
        return false;
    }
}


Algorithm

1. Check if value of head is null or value of next address of head is null then return false.
2. Assign ListNode fast = head & ListNode slow = head.
3. Run while loop till value of fast and value of next address of fast is not equal to null.
4. Then value of next address to slow and value of next to next address to fast.
5. Then check if value of slow is equal to fast then return true.
6. At the end return false.
