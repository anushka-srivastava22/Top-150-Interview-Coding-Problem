Problem Statement

https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/
There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points 
where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.

Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an 
arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.

Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

 Solution

class Solution {
    public int findMinArrowShots(int[][] points) {
        if(points.length == 0)
        {
            return 0;
        }
        Arrays.sort(points,(a,b) -> Integer.compare(a[1],b[1]));
        int arrow=1;
        int end = points[0][1];
        for(int i=1;i<points.length;i++)
        {
            if(points[i][0]>end)
            {
                arrow++;
                end=points[i][1];
            }
        }
        return arrow;
    }
}

Algorithm 
1. Check if length of points is equal to 0 then return 0.
2. Sort the array on the basis of end points.
3. Assign arrow=1 and end = points[0][1].
4. Run for loop from i=1 to length of points.
5. Check if value at points[i][0] is greater than end then increase value of arrow and assign points[i][1] to end.
6. Return arrow.
